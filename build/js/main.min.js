/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

var pageFooter = document.querySelector('.page-footer');
var accordionItemContent = document.querySelectorAll('.accordion__item-content');
var accordionToggle = document.querySelectorAll('.accordion__toggle');
var aboutCompanyHide = document.querySelector('.about-company__hide');
var aboutCompanyButton = document.querySelector('.about-company__button');
var aboutCompanySpan = document.querySelector('.about-company span');
var pageBody = document.querySelector('.page-body');
var overlay = document.querySelector('.overlay');
var modal = document.querySelector('.modal');
var modalToggle = document.querySelector('.modal__toggle');
var feedbackform = document.querySelector('.feedback-form__form');
var modalform = document.querySelector('.modal__form');
var mainNavButton = document.querySelector('.main-nav__button');
var modalName = document.getElementById('modal-name');
var modalPhone = document.getElementById('modal-telephone');
var myName = document.getElementById('name');
var myPhone = document.getElementById('telephone');
var rephone = /([0-9]+)$/;
var rename = /^['A-Za-z\u0410-\u044F]+['A-Za-z\u0410-\u044F]?$/;

var getAddClose = function getAddClose(item) {
  item.classList.add('close');
};

var getToggleClose = function getToggleClose(item) {
  item.classList.add('modal__toggle--close');
}; // Удаляю  класс "no-js" у футера проверив что элемент присутствует


if (typeof pageFooter !== 'undefined' && pageFooter !== null) {
  pageFooter.classList.remove('no-js');
} // Скрываю все списки добавляя класс "close"


if (typeof accordionItemContent !== 'undefined' && accordionItemContent !== null) {
  accordionItemContent.forEach(function (item) {
    getAddClose(item);
  });
} // Добавляю класс "toggle--close" всем кнопкам


if (typeof accordionToggle !== 'undefined' && accordionToggle !== null) {
  accordionToggle.forEach(function (item) {
    getToggleClose(item);
  });
}

var allElems = document.querySelectorAll('.accordion__item-header'); // Вешаю клик на все "шапки" аккордеона для открытия/закрытия элементов

allElems.forEach(function (elem) {
  elem.addEventListener('click', function () {
    var parentElem = elem.parentNode;
    var contentBlock = parentElem.querySelector('.accordion__item-content');
    var currentToggle = parentElem.querySelector('.accordion__toggle');

    if (typeof accordionItemContent !== 'undefined' && accordionItemContent !== null) {
      accordionItemContent.forEach(function (item) {
        getAddClose(item);
      });
    }

    if (typeof accordionToggle !== 'undefined' && accordionToggle !== null) {
      accordionToggle.forEach(function (item) {
        getToggleClose(item);
      });
    } // Открываю скрытый список изменяю вид кнопки


    if (typeof (contentBlock && currentToggle) !== 'undefined' && contentBlock && currentToggle !== null) {
      if (contentBlock.classList.contains('close')) {
        contentBlock.classList.remove('close');
        currentToggle.classList.remove('modal__toggle--close');
        currentToggle.classList.add('modal__toggle--open');
      }
    }
  });
}); // Функция открытия спрятанного текста

if (typeof (aboutCompanyButton && aboutCompanyHide) !== 'undefined' && aboutCompanyButton && aboutCompanyHide !== null) {
  aboutCompanyButton.addEventListener('click', function () {
    var style = aboutCompanyHide.style;
    style.display = style.display === 'block' ? 'none' : 'block';
  });
} // Прячу спан если экран меньше 767рх


var changes = function changes(screen) {
  if (screen.matches) {
    if (typeof (aboutCompanyButton && aboutCompanySpan) !== 'undefined' && aboutCompanyButton && aboutCompanySpan !== null) {
      aboutCompanyButton.addEventListener('click', function () {
        var style = aboutCompanySpan.style;
        style.display = style.display === 'block' ? 'none' : 'block';
      });
    }
  }
};

if (matchMedia) {
  var screen = window.matchMedia('(max-width:767px)');
  screen.addEventListener('change', changes);
  changes(screen);
} // Функция замены надписи на кнопке


if (typeof aboutCompanyButton !== 'undefined' && aboutCompanyButton !== null) {
  aboutCompanyButton.addEventListener('click', function () {
    if (aboutCompanyButton.innerHTML === 'Подробнее') {
      aboutCompanyButton.innerHTML = 'Свернуть';
      return;
    } else {
      aboutCompanyButton.innerHTML = 'Подробнее';
    }
  });
} // ----- Сохранения данных в localStorage -----
// --------------------------------------------


function persist(event) {
  var thisArg = event.path[0];
  localStorage.setItem(thisArg.id, thisArg.value);
}

document.querySelectorAll('input').forEach(function (inputEl) {
  inputEl.value = localStorage.getItem(inputEl.id);
  inputEl.addEventListener('change', persist);
});

if (typeof (mainNavButton && overlay && modal && pageBody && modalToggle && modalName) !== 'undefined' && mainNavButton && overlay && modal && pageBody && modalToggle && modalName !== null) {
  // Функция открытия модалки
  var getOpenModal = function getOpenModal() {
    overlay.classList.add('overlay--open');
    modal.classList.add('modal--open');
    pageBody.classList.add('modal-open');
    modalName.focus();
  }; // Функция закрытия модалки


  var getCloseModal = function getCloseModal() {
    overlay.classList.remove('overlay--open');
    modal.classList.remove('modal--open');
    pageBody.classList.remove('modal-open');
  };

  mainNavButton.addEventListener('click', function (evt) {
    evt.preventDefault();
    getOpenModal();
  });
  modalToggle.addEventListener('click', function (evt) {
    evt.preventDefault();
    getCloseModal();
  });
} // Валидация Имени


if (typeof myName !== 'undefined' && myName !== null) {
  var checkNameValidity = function checkNameValidity() {
    var textName = myName.value;

    if (textName === '') {
      myName.setCustomValidity('поле обязательное');
    } else if (!rename.test(textName)) {
      myName.setCustomValidity('имя может содержать только буквы');
    } else {
      myName.setCustomValidity('');
    }

    myName.reportValidity();
  };

  myName.addEventListener('input', checkNameValidity);
} // Валидация телефона


if (typeof myPhone !== 'undefined' && myPhone !== null) {
  var checkPhoneValidity = function checkPhoneValidity() {
    var textPhone = myPhone.value;

    if (textPhone === '') {
      myPhone.setCustomValidity('поле обязательное');
    } else if (!rephone.test(textPhone)) {
      myPhone.setCustomValidity('номер телефона должен содержать только цифры');
    } else if (textPhone.length !== 17) {
      myPhone.setCustomValidity('введите 10 цифр телефона');
    } else {
      myPhone.setCustomValidity('');
    }

    myPhone.reportValidity();
  };

  myPhone.addEventListener('input', checkPhoneValidity);
} // Валидация Имени модалки


if (typeof modalName !== 'undefined' && modalName !== null) {
  var _checkNameValidity = function _checkNameValidity() {
    var textName = modalName.value;

    if (textName === '') {
      modalName.setCustomValidity('поле обязательное');
    } else if (!rename.test(textName)) {
      modalName.setCustomValidity('имя может содержать только буквы');
    } else {
      modalName.setCustomValidity('');
    }

    modalName.reportValidity();
  };

  modalName.addEventListener('input', _checkNameValidity);
} // Валидация телефона модалки


if (typeof modalPhone !== 'undefined' && modalPhone !== null) {
  var _checkPhoneValidity = function _checkPhoneValidity() {
    var textPhone = modalPhone.value;

    if (textPhone === '') {
      modalPhone.setCustomValidity('поле обязательное');
    } else if (!rephone.test(textPhone)) {
      modalPhone.setCustomValidity('номер телефона должен содержать только цифры');
    } else if (textPhone.length !== 17) {
      modalPhone.setCustomValidity('введите 10 цифр телефона');
    } else {
      modalPhone.setCustomValidity('');
    }

    modalPhone.reportValidity();
  };

  modalPhone.addEventListener('input', _checkPhoneValidity);
} // Отправка формы


if (typeof feedbackform !== 'undefined' && feedbackform !== null) {
  var handleFormSubmit = function handleFormSubmit(evt) {
    evt.preventDefault();
    var formData = new FormData(evt.target);
    fetch('https://echo.htmlacademy.ru/', {
      method: 'POST',
      body: formData
    });
    evt.target.reset();
  };

  feedbackform.addEventListener('submit', handleFormSubmit);
} // Отправка модалки


if (typeof modalform !== 'undefined' && modalform !== null) {
  var _handleFormSubmit = function _handleFormSubmit(evt) {
    evt.preventDefault();
    var formData = new FormData(evt.target);
    fetch('https://echo.htmlacademy.ru/', {
      method: 'POST',
      body: formData
    });
    evt.target.reset();
  };

  modalform.addEventListener('submit', _handleFormSubmit);
} // Добавление маски и закрывающей скобки телефону модалки


if (typeof modalPhone !== 'undefined' && modalPhone !== null) {
  window.addEventListener('DOMContentLoaded', function () {
    function setCursorPosition(pos, elem) {
      elem.focus();

      if (elem.setSelectionRange) {
        elem.setSelectionRange(pos, pos);
      } else if (elem.createTextRange) {
        var range = elem.createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        range.select();
      }
    }

    var isDel = false;
    var isBack = false;

    function mask(event) {
      var curentPosition = -1;

      if (event.type === 'keyup') {
        curentPosition = modalPhone.selectionStart;
      }

      var matrix = '+7 (___) ___ ____';
      var i = 0;
      var def = matrix.replace(/\D/g, '');
      var val = modalPhone.value.replace(/\D/g, '');

      if (def.length >= val.length) {
        val = def;
      }

      var numb = /[_\d]/;
      modalPhone.value = matrix.replace(/./g, function (a) {
        if (numb.test(a) && i <= val.length) {
          return val.charAt(i++);
        } else if (i < val.length) {
          return a;
        } else if (i++ === 6 && val.length === 4 && event.keyCode !== 8 && event.keyCode !== '') {
          return ')';
        } else {
          return '';
        }
      });
      isBack = isDel = false;

      if (event.keyCode === 8) {
        isBack = true;
      } else if (event.keyCode === 46) {
        isDel = true;
      }

      if (event.type === 'blur') {
        if (modalPhone.value.length === 2) {
          modalPhone.value = '';
        }
      } else if (curentPosition !== -1) {
        if (isDel || isBack) {
          setCursorPosition(curentPosition, modalPhone);
        }
      } else if (event.type === 'focus') {
        setCursorPosition(modalPhone.value.length, modalPhone);
      }
    }

    modalPhone.addEventListener('focus', mask, false);
    modalPhone.addEventListener('blur', mask, false);
    modalPhone.addEventListener('keyup', mask, false);
  });
}

if (typeof myPhone !== 'undefined' && myPhone !== null) {
  window.addEventListener('DOMContentLoaded', function () {
    function setCursorPosition(pos, elem) {
      elem.focus();

      if (elem.setSelectionRange) {
        elem.setSelectionRange(pos, pos);
      } else if (elem.createTextRange) {
        var range = elem.createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        range.select();
      }
    }

    var isDel = false;
    var isBack = false;

    function mask(event) {
      var curentPosition = -1;

      if (event.type === 'keyup') {
        curentPosition = myPhone.selectionStart;
      }

      var matrix = '+7 (___) ___ ____';
      var i = 0;
      var def = matrix.replace(/\D/g, '');
      var val = myPhone.value.replace(/\D/g, '');

      if (def.length >= val.length) {
        val = def;
      }

      var numb = /[_\d]/;
      myPhone.value = matrix.replace(/./g, function (a) {
        if (numb.test(a) && i <= val.length) {
          return val.charAt(i++);
        } else if (i < val.length) {
          return a;
        } else if (i++ === 6 && val.length === 4 && event.keyCode !== 8 && event.keyCode !== '') {
          return ')';
        } else {
          return '';
        }
      });
      isBack = isDel = false;

      if (event.keyCode === 8) {
        isBack = true;
      } else if (event.keyCode === 46) {
        isDel = true;
      }

      if (event.type === 'blur') {
        if (myPhone.value.length === 2) {
          myPhone.value = '';
        }
      } else if (curentPosition !== -1) {
        if (isDel || isBack) {
          setCursorPosition(curentPosition, myPhone);
        }
      } else if (event.type === 'focus') {
        setCursorPosition(myPhone.value.length, myPhone);
      }
    }

    myPhone.addEventListener('focus', mask, false);
    myPhone.addEventListener('blur', mask, false);
    myPhone.addEventListener('keyup', mask, false);
  });
}

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map